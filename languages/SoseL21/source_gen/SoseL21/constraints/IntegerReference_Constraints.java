package SoseL21.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import SoseL21.behavior.IBlock__BehaviorDescriptor;
import jetbrains.mps.scope.ListScope;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class IntegerReference_Constraints extends BaseConstraintsDescriptor {
  public IntegerReference_Constraints() {
    super(CONCEPTS.IntegerReference$_E);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.ref$N7MS, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:1964bad3-1c4b-4e65-b684-83a58d98473f(SoseL21.constraints)", "8661094618824279394");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            Iterable<SNode> statementContents = new ArrayList<SNode>();
            SNode root = _context.getContextNode();
            do {
              {
                final SNode iBlock = root;
                if (SNodeOperations.isInstanceOf(iBlock, CONCEPTS.IBlock$KC)) {
                  statementContents = Sequence.fromIterable(statementContents).concat(Sequence.fromIterable(IBlock__BehaviorDescriptor.getBlock_id2u8r5d7IC3S.invoke(iBlock)));
                }
              }
              root = SNodeOperations.getParent(root);
            } while ((root != null));
            return ListScope.forNamedElements(SNodeOperations.ofConcept(statementContents, CONCEPTS.Integer$xv));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept IntegerReference$_E = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L, "SoseL21.structure.IntegerReference");
    /*package*/ static final SInterfaceConcept IBlock$KC = MetaAdapterFactory.getInterfaceConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL, "SoseL21.structure.IBlock");
    /*package*/ static final SConcept Integer$xv = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L, "SoseL21.structure.Integer");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ref$N7MS = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L, 0x403c8839c2e84ddeL, "ref");
  }
}
