package SoseL21.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Assertion = 0;
  public static final int AssignBoolean = 1;
  public static final int AssignInteger = 2;
  public static final int BinaryBoolean = 3;
  public static final int BinaryInteger = 4;
  public static final int BolleanReturn = 5;
  public static final int Boolean = 6;
  public static final int BooleanExpression = 7;
  public static final int BooleanParam = 8;
  public static final int BooleanReference = 9;
  public static final int BooleanResult = 10;
  public static final int CallFunction = 11;
  public static final int Class = 12;
  public static final int Constructor = 13;
  public static final int Declaration = 14;
  public static final int DeclarationBool = 15;
  public static final int DeclarationInteger = 16;
  public static final int Divide = 17;
  public static final int Expression = 18;
  public static final int ExpressionState = 19;
  public static final int For = 20;
  public static final int Function = 21;
  public static final int Greater = 22;
  public static final int GreaterEqual = 23;
  public static final int IBlock = 24;
  public static final int IStatementContent = 25;
  public static final int IfElse = 26;
  public static final int Instantiation = 27;
  public static final int Integer = 28;
  public static final int IntegerExpression = 29;
  public static final int IntegerParam = 30;
  public static final int IntegerReference = 31;
  public static final int IntegerReturn = 32;
  public static final int Less = 33;
  public static final int LessEqual = 34;
  public static final int Minus = 35;
  public static final int Multiply = 36;
  public static final int NotEqual = 37;
  public static final int NumberResult = 38;
  public static final int Parameter = 39;
  public static final int ParenExpression = 40;
  public static final int Plus = 41;
  public static final int ReferBooleanParam = 42;
  public static final int ReferIntegerParam = 43;
  public static final int Return = 44;
  public static final int SoSeWorksheet = 45;
  public static final int TestSuite = 46;
  public static final int Variable = 47;
  public static final int While = 48;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL);
    builder.put(0x3b001b0bbabed2c2L, Assertion);
    builder.put(0x52ab125ed673d8ffL, AssignBoolean);
    builder.put(0x52ab125ed6705413L, AssignInteger);
    builder.put(0x27886c5347c15db5L, BinaryBoolean);
    builder.put(0x52ab125ed6750519L, BinaryInteger);
    builder.put(0x783263aad943765eL, BolleanReturn);
    builder.put(0xbfd127414c1ae46L, Boolean);
    builder.put(0x403c8839c2e6bde3L, BooleanExpression);
    builder.put(0x783263aad93fd8f3L, BooleanParam);
    builder.put(0x550d21c8a2e4a3eL, BooleanReference);
    builder.put(0x27886c5347c180d2L, BooleanResult);
    builder.put(0x783263aad9437780L, CallFunction);
    builder.put(0x783263aad9404269L, Class);
    builder.put(0x783263aad940425eL, Constructor);
    builder.put(0x783263aad93fd602L, Declaration);
    builder.put(0x783263aad93fd671L, DeclarationBool);
    builder.put(0x783263aad93fd7a5L, DeclarationInteger);
    builder.put(0x52ab125ed6758010L, Divide);
    builder.put(0x550d21c8a2e5f49L, Expression);
    builder.put(0x403c8839c2edc924L, ExpressionState);
    builder.put(0x783263aad93b98b1L, For);
    builder.put(0x783263aad93eaaa4L, Function);
    builder.put(0x783263aad90b2b50L, Greater);
    builder.put(0x783263aad90b2b4dL, GreaterEqual);
    builder.put(0x27886c5347ba80ccL, IBlock);
    builder.put(0xbfd127414bf7cffL, IStatementContent);
    builder.put(0x783263aad93e3187L, IfElse);
    builder.put(0x352459422d1d9282L, Instantiation);
    builder.put(0xbfd127414c0f1f7L, Integer);
    builder.put(0x403c8839c2e6bde4L, IntegerExpression);
    builder.put(0x783263aad93fda43L, IntegerParam);
    builder.put(0xbfd127414c2cb91L, IntegerReference);
    builder.put(0x783263aad9437506L, IntegerReturn);
    builder.put(0x783263aad90b2b52L, Less);
    builder.put(0x783263aad90b2b51L, LessEqual);
    builder.put(0x52ab125ed675800fL, Minus);
    builder.put(0x52ab125ed6758011L, Multiply);
    builder.put(0x783263aad90b2b53L, NotEqual);
    builder.put(0x52ab125ed67b2894L, NumberResult);
    builder.put(0x783263aad93ead20L, Parameter);
    builder.put(0x52ab125ed67b28a7L, ParenExpression);
    builder.put(0x52ab125ed675800eL, Plus);
    builder.put(0x783263aad93fdba2L, ReferBooleanParam);
    builder.put(0x783263aad9430a26L, ReferIntegerParam);
    builder.put(0x783263aad93eae03L, Return);
    builder.put(0xbfd127414bf7d02L, SoSeWorksheet);
    builder.put(0x3b001b0bbabecf48L, TestSuite);
    builder.put(0x403c8839c2e98e44L, Variable);
    builder.put(0x783263aad93e941dL, While);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
