package SoseL21.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAssertion = createDescriptorForAssertion();
  /*package*/ final ConceptDescriptor myConceptAssignBoolean = createDescriptorForAssignBoolean();
  /*package*/ final ConceptDescriptor myConceptAssignInteger = createDescriptorForAssignInteger();
  /*package*/ final ConceptDescriptor myConceptBinaryBoolean = createDescriptorForBinaryBoolean();
  /*package*/ final ConceptDescriptor myConceptBinaryInteger = createDescriptorForBinaryInteger();
  /*package*/ final ConceptDescriptor myConceptBolleanReturn = createDescriptorForBolleanReturn();
  /*package*/ final ConceptDescriptor myConceptBoolean = createDescriptorForBoolean();
  /*package*/ final ConceptDescriptor myConceptBooleanExpression = createDescriptorForBooleanExpression();
  /*package*/ final ConceptDescriptor myConceptBooleanParam = createDescriptorForBooleanParam();
  /*package*/ final ConceptDescriptor myConceptBooleanReference = createDescriptorForBooleanReference();
  /*package*/ final ConceptDescriptor myConceptBooleanResult = createDescriptorForBooleanResult();
  /*package*/ final ConceptDescriptor myConceptCallFunction = createDescriptorForCallFunction();
  /*package*/ final ConceptDescriptor myConceptClass = createDescriptorForClass();
  /*package*/ final ConceptDescriptor myConceptConstructor = createDescriptorForConstructor();
  /*package*/ final ConceptDescriptor myConceptDeclaration = createDescriptorForDeclaration();
  /*package*/ final ConceptDescriptor myConceptDeclarationBool = createDescriptorForDeclarationBool();
  /*package*/ final ConceptDescriptor myConceptDeclarationInteger = createDescriptorForDeclarationInteger();
  /*package*/ final ConceptDescriptor myConceptDivide = createDescriptorForDivide();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionState = createDescriptorForExpressionState();
  /*package*/ final ConceptDescriptor myConceptFor = createDescriptorForFor();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptGreater = createDescriptorForGreater();
  /*package*/ final ConceptDescriptor myConceptGreaterEqual = createDescriptorForGreaterEqual();
  /*package*/ final ConceptDescriptor myConceptIBlock = createDescriptorForIBlock();
  /*package*/ final ConceptDescriptor myConceptIStatementContent = createDescriptorForIStatementContent();
  /*package*/ final ConceptDescriptor myConceptIfElse = createDescriptorForIfElse();
  /*package*/ final ConceptDescriptor myConceptInstantiation = createDescriptorForInstantiation();
  /*package*/ final ConceptDescriptor myConceptInteger = createDescriptorForInteger();
  /*package*/ final ConceptDescriptor myConceptIntegerExpression = createDescriptorForIntegerExpression();
  /*package*/ final ConceptDescriptor myConceptIntegerParam = createDescriptorForIntegerParam();
  /*package*/ final ConceptDescriptor myConceptIntegerReference = createDescriptorForIntegerReference();
  /*package*/ final ConceptDescriptor myConceptIntegerReturn = createDescriptorForIntegerReturn();
  /*package*/ final ConceptDescriptor myConceptLess = createDescriptorForLess();
  /*package*/ final ConceptDescriptor myConceptLessEqual = createDescriptorForLessEqual();
  /*package*/ final ConceptDescriptor myConceptMinus = createDescriptorForMinus();
  /*package*/ final ConceptDescriptor myConceptMultiply = createDescriptorForMultiply();
  /*package*/ final ConceptDescriptor myConceptNotEqual = createDescriptorForNotEqual();
  /*package*/ final ConceptDescriptor myConceptNumberResult = createDescriptorForNumberResult();
  /*package*/ final ConceptDescriptor myConceptParameter = createDescriptorForParameter();
  /*package*/ final ConceptDescriptor myConceptParenExpression = createDescriptorForParenExpression();
  /*package*/ final ConceptDescriptor myConceptPlus = createDescriptorForPlus();
  /*package*/ final ConceptDescriptor myConceptReferBooleanParam = createDescriptorForReferBooleanParam();
  /*package*/ final ConceptDescriptor myConceptReferIntegerParam = createDescriptorForReferIntegerParam();
  /*package*/ final ConceptDescriptor myConceptReturn = createDescriptorForReturn();
  /*package*/ final ConceptDescriptor myConceptSoSeWorksheet = createDescriptorForSoSeWorksheet();
  /*package*/ final ConceptDescriptor myConceptTestSuite = createDescriptorForTestSuite();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptWhile = createDescriptorForWhile();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAssertion, myConceptAssignBoolean, myConceptAssignInteger, myConceptBinaryBoolean, myConceptBinaryInteger, myConceptBolleanReturn, myConceptBoolean, myConceptBooleanExpression, myConceptBooleanParam, myConceptBooleanReference, myConceptBooleanResult, myConceptCallFunction, myConceptClass, myConceptConstructor, myConceptDeclaration, myConceptDeclarationBool, myConceptDeclarationInteger, myConceptDivide, myConceptExpression, myConceptExpressionState, myConceptFor, myConceptFunction, myConceptGreater, myConceptGreaterEqual, myConceptIBlock, myConceptIStatementContent, myConceptIfElse, myConceptInstantiation, myConceptInteger, myConceptIntegerExpression, myConceptIntegerParam, myConceptIntegerReference, myConceptIntegerReturn, myConceptLess, myConceptLessEqual, myConceptMinus, myConceptMultiply, myConceptNotEqual, myConceptNumberResult, myConceptParameter, myConceptParenExpression, myConceptPlus, myConceptReferBooleanParam, myConceptReferIntegerParam, myConceptReturn, myConceptSoSeWorksheet, myConceptTestSuite, myConceptVariable, myConceptWhile);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Assertion:
        return myConceptAssertion;
      case LanguageConceptSwitch.AssignBoolean:
        return myConceptAssignBoolean;
      case LanguageConceptSwitch.AssignInteger:
        return myConceptAssignInteger;
      case LanguageConceptSwitch.BinaryBoolean:
        return myConceptBinaryBoolean;
      case LanguageConceptSwitch.BinaryInteger:
        return myConceptBinaryInteger;
      case LanguageConceptSwitch.BolleanReturn:
        return myConceptBolleanReturn;
      case LanguageConceptSwitch.Boolean:
        return myConceptBoolean;
      case LanguageConceptSwitch.BooleanExpression:
        return myConceptBooleanExpression;
      case LanguageConceptSwitch.BooleanParam:
        return myConceptBooleanParam;
      case LanguageConceptSwitch.BooleanReference:
        return myConceptBooleanReference;
      case LanguageConceptSwitch.BooleanResult:
        return myConceptBooleanResult;
      case LanguageConceptSwitch.CallFunction:
        return myConceptCallFunction;
      case LanguageConceptSwitch.Class:
        return myConceptClass;
      case LanguageConceptSwitch.Constructor:
        return myConceptConstructor;
      case LanguageConceptSwitch.Declaration:
        return myConceptDeclaration;
      case LanguageConceptSwitch.DeclarationBool:
        return myConceptDeclarationBool;
      case LanguageConceptSwitch.DeclarationInteger:
        return myConceptDeclarationInteger;
      case LanguageConceptSwitch.Divide:
        return myConceptDivide;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionState:
        return myConceptExpressionState;
      case LanguageConceptSwitch.For:
        return myConceptFor;
      case LanguageConceptSwitch.Function:
        return myConceptFunction;
      case LanguageConceptSwitch.Greater:
        return myConceptGreater;
      case LanguageConceptSwitch.GreaterEqual:
        return myConceptGreaterEqual;
      case LanguageConceptSwitch.IBlock:
        return myConceptIBlock;
      case LanguageConceptSwitch.IStatementContent:
        return myConceptIStatementContent;
      case LanguageConceptSwitch.IfElse:
        return myConceptIfElse;
      case LanguageConceptSwitch.Instantiation:
        return myConceptInstantiation;
      case LanguageConceptSwitch.Integer:
        return myConceptInteger;
      case LanguageConceptSwitch.IntegerExpression:
        return myConceptIntegerExpression;
      case LanguageConceptSwitch.IntegerParam:
        return myConceptIntegerParam;
      case LanguageConceptSwitch.IntegerReference:
        return myConceptIntegerReference;
      case LanguageConceptSwitch.IntegerReturn:
        return myConceptIntegerReturn;
      case LanguageConceptSwitch.Less:
        return myConceptLess;
      case LanguageConceptSwitch.LessEqual:
        return myConceptLessEqual;
      case LanguageConceptSwitch.Minus:
        return myConceptMinus;
      case LanguageConceptSwitch.Multiply:
        return myConceptMultiply;
      case LanguageConceptSwitch.NotEqual:
        return myConceptNotEqual;
      case LanguageConceptSwitch.NumberResult:
        return myConceptNumberResult;
      case LanguageConceptSwitch.Parameter:
        return myConceptParameter;
      case LanguageConceptSwitch.ParenExpression:
        return myConceptParenExpression;
      case LanguageConceptSwitch.Plus:
        return myConceptPlus;
      case LanguageConceptSwitch.ReferBooleanParam:
        return myConceptReferBooleanParam;
      case LanguageConceptSwitch.ReferIntegerParam:
        return myConceptReferIntegerParam;
      case LanguageConceptSwitch.Return:
        return myConceptReturn;
      case LanguageConceptSwitch.SoSeWorksheet:
        return myConceptSoSeWorksheet;
      case LanguageConceptSwitch.TestSuite:
        return myConceptTestSuite;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.While:
        return myConceptWhile;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAssertion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Assertion", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabed2c2L);
    b.class_(false, false, false);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4251427785429406402");
    b.version(2);
    b.aggregate("value", 0x3b001b0bbabed2e3L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L).optional(false).ordered(true).multiple(false).origin("4251427785429406435").done();
    b.aggregate("funtion", 0x3b001b0bbabed2e5L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437780L).optional(false).ordered(true).multiple(false).origin("4251427785429406437").done();
    b.alias("assert");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "AssignBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed673d8ffL);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661755135");
    b.version(2);
    b.aggregate("ref", 0x52ab125ed673d902L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e4a3eL).optional(false).ordered(true).multiple(false).origin("5956875130661755138").done();
    b.aggregate("value", 0x52ab125ed673d904L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L).optional(false).ordered(true).multiple(false).origin("5956875130661755140").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "AssignInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6705413L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661524499");
    b.version(2);
    b.aggregate("ref", 0x52ab125ed6705416L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L).optional(false).ordered(true).multiple(false).origin("5956875130661524502").done();
    b.aggregate("value", 0x52ab125ed6705418L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("5956875130661524504").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BooleanExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/2848645869253778869");
    b.version(2);
    b.aggregate("first", 0x27886c5347c16539L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("2848645869253780793").done();
    b.aggregate("second", 0x27886c5347c1653bL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("2848645869253780795").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BinaryInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661831961");
    b.version(2);
    b.aggregate("first", 0x52ab125ed67507dcL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("5956875130661832668").done();
    b.aggregate("second", 0x52ab125ed67507deL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("5956875130661832670").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBolleanReturn() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BolleanReturn", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad943765eL);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Return", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eae03L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827552350");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Boolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c1ae46L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Variable", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e98e44L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/863866993298746950");
    b.version(2);
    b.aggregate("value", 0x783263aad9178630L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L).optional(false).ordered(true).multiple(false).origin("8661094618824672816").done();
    b.alias("boolean");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BooleanExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L);
    b.class_(false, true, false);
    b.super_("SoseL21.structure.Expression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4628724298694442467");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanParam() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BooleanParam", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd8f3L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Parameter", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93ead20L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827315443");
    b.version(2);
    b.alias("boolean");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BooleanReference", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e4a3eL);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BooleanExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/383036988345698878");
    b.version(2);
    b.associate("ref", 0x403c8839c2e7a258L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c1ae46L).optional(false).origin("4628724298694500952").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanResult() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "BooleanResult", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c180d2L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BooleanExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/2848645869253787858");
    b.version(2);
    b.property("value", 0x27886c5347c180d3L).type(PrimitiveTypeId.BOOLEAN).origin("2848645869253787859").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCallFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "CallFunction", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437780L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827552640");
    b.version(2);
    b.associate("func", 0x783263aad9437785L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L).optional(false).origin("8661094618827552645").done();
    b.aggregate("values", 0x783263aad9437783L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd602L).optional(true).ordered(true).multiple(true).origin("8661094618827552643").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForClass() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Class", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9404269L);
    b.class_(false, false, true);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827342441");
    b.version(2);
    b.aggregate("state", 0x783263aad940426fL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("8661094618827342447").done();
    b.alias("class");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstructor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Constructor", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad940425eL);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827342430");
    b.version(2);
    b.associate("class", 0x783263aad9429b83L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9404269L).optional(false).origin("8661094618827496323").done();
    b.aggregate("params", 0x783263aad9404264L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93ead20L).optional(true).ordered(true).multiple(true).origin("8661094618827342436").done();
    b.aggregate("block", 0x783263aad9404266L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("8661094618827342438").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Declaration", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd602L);
    b.class_(false, true, false);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827314690");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclarationBool() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "DeclarationBool", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd671L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Declaration", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd602L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827314801");
    b.version(2);
    b.property("value", 0x783263aad93fd672L).type(PrimitiveTypeId.BOOLEAN).origin("8661094618827314802").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclarationInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "DeclarationInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd7a5L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Declaration", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd602L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827315109");
    b.version(2);
    b.property("value", 0x783263aad93fd7a6L).type(PrimitiveTypeId.INTEGER).origin("8661094618827315110").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivide() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Divide", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6758010L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661863440");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Expression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L);
    b.class_(false, true, false);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/383036988345704265");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionState() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "ExpressionState", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2edc924L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4628724298694904100");
    b.version(2);
    b.aggregate("expression", 0x403c8839c2edc927L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L).optional(false).ordered(true).multiple(false).origin("4628724298694904103").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "For", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827036849");
    b.version(2);
    b.aggregate("int", 0x783263aad93b98b7L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L).optional(false).ordered(true).multiple(false).origin("8661094618827036855").done();
    b.aggregate("bool", 0x783263aad93b98bbL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L).optional(false).ordered(true).multiple(false).origin("8661094618827036859").done();
    b.aggregate("increment", 0x783263aad93b98beL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(false).ordered(true).multiple(false).origin("8661094618827036862").done();
    b.aggregate("body", 0x783263aad93b98c2L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("8661094618827036866").done();
    b.alias("for");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Function", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827238052");
    b.version(2);
    b.property("nonpure", 0x783263aad93ead1cL).type(PrimitiveTypeId.BOOLEAN).origin("8661094618827238684").done();
    b.aggregate("params", 0x783263aad93ead1eL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93ead20L).optional(true).ordered(true).multiple(true).origin("8661094618827238686").done();
    b.aggregate("body", 0x783263aad93eadf7L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("8661094618827238903").done();
    b.aggregate("funcValue", 0x783263aad93eadfaL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L).optional(true).ordered(true).multiple(false).origin("8661094618827238906").done();
    b.aggregate("funcReturn", 0x783263aad93eadfeL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eae03L).optional(false).ordered(true).multiple(false).origin("8661094618827238910").done();
    b.alias("function");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreater() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Greater", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b50L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618823863120");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "GreaterEqual", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b4dL);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618823863117");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IBlock", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.interface_();
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/2848645869253329100");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIStatementContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IStatementContent", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/863866993298603263");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfElse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IfElse", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e3187L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827207047");
    b.version(2);
    b.aggregate("cond", 0x783263aad93e318dL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L).optional(false).ordered(true).multiple(false).origin("8661094618827207053").done();
    b.aggregate("if", 0x783263aad93e318fL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(false).ordered(true).multiple(true).origin("8661094618827207055").done();
    b.aggregate("else", 0x783263aad93e3192L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("8661094618827207058").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstantiation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Instantiation", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x352459422d1d9282L);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/3829283723931390594");
    b.version(2);
    b.associate("class", 0x352459422d1d928aL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9404269L).optional(false).origin("3829283723931390602").done();
    b.aggregate("parameters", 0x352459422d1d9288L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd602L).optional(true).ordered(true).multiple(true).origin("3829283723931390600").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Integer", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Variable", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e98e44L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/863866993298698743");
    b.version(2);
    b.property("value", 0x602edc9f821baa0cL).type(PrimitiveTypeId.INTEGER).origin("6930719454210533900").done();
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.class_(false, true, false);
    b.super_("SoseL21.structure.Expression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4628724298694442468");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerParam() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IntegerParam", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fda43L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Parameter", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93ead20L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827315779");
    b.version(2);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IntegerReference", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/863866993298819985");
    b.version(2);
    b.associate("ref", 0x403c8839c2e84ddeL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L).optional(false).origin("4628724298694544862").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerReturn() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "IntegerReturn", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437506L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.Return", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eae03L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827552006");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLess() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Less", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b52L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618823863122");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "LessEqual", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b51L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618823863121");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Minus", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed675800fL);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661863439");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiply() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Multiply", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6758011L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661863441");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "NotEqual", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b53L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryBoolean", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618823863123");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumberResult() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "NumberResult", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed67b2894L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130662234260");
    b.version(2);
    b.property("value", 0x52ab125ed67b2895L).type(PrimitiveTypeId.INTEGER).origin("5956875130662234261").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Parameter", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93ead20L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827238688");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParenExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "ParenExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed67b28a7L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130662234279");
    b.version(2);
    b.aggregate("expression", 0x52ab125ed67b28a8L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L).optional(false).ordered(true).multiple(false).origin("5956875130662234280").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Plus", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed675800eL);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BinaryInteger", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/5956875130661863438");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReferBooleanParam() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "ReferBooleanParam", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fdba2L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.BooleanExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827316130");
    b.version(2);
    b.associate("ref", 0x783263aad93fdba3L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd8f3L).optional(false).origin("8661094618827316131").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReferIntegerParam() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "ReferIntegerParam", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9430a26L);
    b.class_(false, false, false);
    b.super_("SoseL21.structure.IntegerExpression", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde4L);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827524646");
    b.version(2);
    b.associate("ref", 0x783263aad9430a27L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fda43L).optional(false).origin("8661094618827524647").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReturn() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Return", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eae03L);
    b.class_(false, true, false);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827238915");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSoSeWorksheet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "SoSeWorksheet", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7d02L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/863866993298603266");
    b.version(2);
    b.aggregate("contents", 0xbfd127414bf7d05L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(true).ordered(true).multiple(true).origin("863866993298603269").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestSuite() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "TestSuite", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabecf48L);
    b.class_(false, false, true);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4251427785429405512");
    b.version(2);
    b.aggregate("assertion", 0x3b001b0bbabf0636L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabed2c2L).optional(true).ordered(true).multiple(true).origin("4251427785429419574").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "Variable", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e98e44L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/4628724298694626884");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoseL21", "While", 0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e941dL);
    b.class_(false, false, false);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL);
    b.parent(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347ba80ccL);
    b.origin("r:554ad234-72c0-4aee-a191-8041fbe202c4(SoseL21.structure)/8661094618827232285");
    b.version(2);
    b.aggregate("cond", 0x783263aad93e9f2fL).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2e6bde3L).optional(false).ordered(true).multiple(false).origin("8661094618827235119").done();
    b.aggregate("body", 0x783263aad93e9f31L).target(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7cffL).optional(false).ordered(true).multiple(true).origin("8661094618827235121").done();
    return b.create();
  }
}
