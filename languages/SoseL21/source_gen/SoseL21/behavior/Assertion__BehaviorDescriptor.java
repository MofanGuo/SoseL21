package SoseL21.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEvaluationHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Assertion__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(Assertion__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabed2c2L, "SoseL21.structure.Assertion");

  public static final SMethod<String> getTestResult_id3G06KIUJMbl = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTestResult").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3G06KIUJMbl").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getTestResult_id3G06KIUJMbl);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getTestResult_id3G06KIUJMbl(@NotNull SNode __thisNode__, SNode node) {
    InterpreterEvaluationHelper helper = new InterpreterEvaluationHelper("arithmetic");
    if ((SLinkOperations.getTarget(node, LINKS.funtion$au$x) == null)) {
      return "Fail";
    }
    if (SNodeOperations.getConcept(SLinkOperations.getTarget(node, LINKS.value$au6v)).equals(CONCEPTS.Expression$Yb)) {
      return "Fail";
    }
    Object result = helper.evaluate(SLinkOperations.getTarget(node, LINKS.funtion$au$x));
    Object compareResult = helper.evaluate(SLinkOperations.getTarget(node, LINKS.value$au6v));
    LoggingRuntime.logMsgView(Level.DEBUG, "Result: " + result, Assertion__BehaviorDescriptor.class, null, null);
    LoggingRuntime.logMsgView(Level.DEBUG, "Expecting Result: " + compareResult, Assertion__BehaviorDescriptor.class, null, null);
    if (result == compareResult) {
      return "Correct->" + "result:" + result + "    with expecting result:" + compareResult;
    }
    return "wrong";
  }

  /*package*/ Assertion__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getTestResult_id3G06KIUJMbl(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink funtion$au$x = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabed2c2L, 0x3b001b0bbabed2e5L, "funtion");
    /*package*/ static final SContainmentLink value$au6v = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x3b001b0bbabed2c2L, 0x3b001b0bbabed2e3L, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Expression$Yb = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e5f49L, "SoseL21.structure.Expression");
  }
}
