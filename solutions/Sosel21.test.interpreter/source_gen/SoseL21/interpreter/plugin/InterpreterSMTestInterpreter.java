package SoseL21.interpreter.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.interpreter.rt.InterpreterBase;
import java.util.List;
import com.mbeddr.mpsutil.interpreter.rt.IEvaluator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.mpsutil.interpreter.rt.ConceptEvaluatorBase;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.mpsutil.interpreter.rt.StopAndReturnException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEscapeException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterRuntimeException;
import com.mbeddr.mpsutil.interpreter.rt.EvaluatorInfo;
import SoseL21.plugin.SoselValue;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.mbeddr.mpsutil.interpreter.rt.ITypeMapper;
import com.mbeddr.mpsutil.interpreter.rt.IRelationship;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class InterpreterSMTestInterpreter extends InterpreterBase {
  public InterpreterSMTestInterpreter() {
    init();
  }

  protected void populateEvaluators(List<? extends IEvaluator> evaluators) {
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.SoSeWorksheet$t7, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662914639", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          Iterator<SNode> iteContents = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.contents$WUQ2)).iterator();
          while (iteContents.hasNext()) {
            SNode nodeContent = iteContents.next();
            context.getRootInterpreter().evaluate(nodeContent, context, coverage, trace, false);
          }
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("SoSeWorksheet()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("SoSeWorksheet");
      }

      @Override
      public String toString() {
        return "SoSeWorksheet";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.IntegerReference$_E, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/3829283723929421672", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Integer> values = SoselValue.findInt();
          return values.getValue(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.reference$N7MS), PROPS.name$MnvL));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("IntegerReference()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("IntegerReference");
      }

      @Override
      public String toString() {
        return "IntegerReference";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Integer$xv, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130663003348", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Integer> values = SoselValue.findInt();
          values.setValue(true, SPropertyOperations.getString(node, PROPS.name$MnvL), SPropertyOperations.getInteger(node, PROPS.value$UGmu));
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("int()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Integer");
      }

      @Override
      public String toString() {
        return "Integer";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.AssignInteger$nK, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130663005151", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Integer> values = SoselValue.findInt();
          int value = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.intValue$WQj4), context, coverage, trace, false);
          values.setValue(false, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.reference$WPP2), LINKS.reference$N7MS), PROPS.name$MnvL), value);
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("AssignInteger()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("AssignInteger");
      }

      @Override
      public String toString() {
        return "AssignInteger";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.IntegerLetter$ij, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618824606149", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SPropertyOperations.getInteger(node, PROPS.value$dkY0);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("IntegerLetter()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("IntegerLetter");
      }

      @Override
      public String toString() {
        return "IntegerLetter";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Boolean$m_, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826965763", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          boolean value = (boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.value$$dNu), context, coverage, trace, false);
          SoselValue.findBool().setValue(true, SPropertyOperations.getString(node, PROPS.name$MnvL), value);
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("boolean()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Boolean");
      }

      @Override
      public String toString() {
        return "Boolean";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.BooleanLetter$U, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826985422", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SPropertyOperations.getBoolean(node, PROPS.value$Fchw);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("BooleanLetter()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("BooleanLetter");
      }

      @Override
      public String toString() {
        return "BooleanLetter";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.AssignBoolean$AL, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618827000794", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          boolean value = (boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.booleanValue$R_4p), context, coverage, trace, false);
          SoselValue.findBool().setValue(false, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.reference$RvF2), LINKS.reference$ZtkH), PROPS.name$MnvL), value);
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("AssignBoolean()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("AssignBoolean");
      }

      @Override
      public String toString() {
        return "AssignBoolean";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.ReferIntegerParam$2I, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/3829283723928583085", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Integer> value = SoselValue.findInt();
          return value.getParam(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.ref$mdbw), PROPS.name$MnvL));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("ReferIntegerParam()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("ReferIntegerParam");
      }

      @Override
      public String toString() {
        return "ReferIntegerParam";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.ReferBooleanParam$oT, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/3829283723928608290", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Boolean> value = SoselValue.findBool();
          return value.getParam(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.ref$qSh0), PROPS.name$MnvL));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("ReferBooleanParam()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("ReferBooleanParam");
      }

      @Override
      public String toString() {
        return "ReferBooleanParam";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.BooleanReference$SX, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618827028595", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SoselValue.findBool().getValue(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.reference$ZtkH), PROPS.name$MnvL));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("BooleanReference()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("BooleanReference");
      }

      @Override
      public String toString() {
        return "BooleanReference";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Plus$K9, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662980550", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$oXey), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$p2BT), context, coverage, trace, false);
          int result = first + second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("+()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Plus");
      }

      @Override
      public String toString() {
        return "Plus";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Minus$KC, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662994539", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$oXey), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$p2BT), context, coverage, trace, false);
          int result = first - second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("-()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Minus");
      }

      @Override
      public String toString() {
        return "Minus";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Multiply$VL, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662997436", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$oXey), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$p2BT), context, coverage, trace, false);
          int result = first * second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("*()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Multiply");
      }

      @Override
      public String toString() {
        return "Multiply";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Divide$Vi, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130663000354", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$oXey), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$p2BT), context, coverage, trace, false);
          int result = first / second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("/()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Divide");
      }

      @Override
      public String toString() {
        return "Divide";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Less$Kn, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826837974", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$1VSY), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$1Wn0), context, coverage, trace, false);
          boolean result = first < second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("<()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Less");
      }

      @Override
      public String toString() {
        return "Less";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Greater$Jp, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826867900", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$1VSY), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$1Wn0), context, coverage, trace, false);
          boolean result = first > second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException(">()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Greater");
      }

      @Override
      public String toString() {
        return "Greater";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.LessEqual$JS, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826874791", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$1VSY), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$1Wn0), context, coverage, trace, false);
          boolean result = first <= second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("<=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("LessEqual");
      }

      @Override
      public String toString() {
        return "LessEqual";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.GreaterEqual$zL, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826886089", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$1VSY), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$1Wn0), context, coverage, trace, false);
          boolean result = first >= second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException(">=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("GreaterEqual");
      }

      @Override
      public String toString() {
        return "GreaterEqual";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.NotEqual$KQ, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618826893144", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int first = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.first$1VSY), context, coverage, trace, false);
          int second = (int) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.second$1Wn0), context, coverage, trace, false);
          boolean result = first != second;
          return result;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("!=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("NotEqual");
      }

      @Override
      public String toString() {
        return "NotEqual";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.CallFunction$Ff, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/3829283723928372126", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.Value<Boolean> boolValue = SoselValue.findBool();
          SoselValue.Value<Integer> intValue = SoselValue.findInt();

          SoselValue.allValuesCall();

          Iterator<String> names = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.func$D2o4), LINKS.params$E8mA)).select(new ISelector<SNode, String>() {
            public String select(SNode it) {
              return SPropertyOperations.getString(it, PROPS.name$MnvL);
            }
          }).iterator();
          Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.values$D1U2)).iterator();
          while (itr.hasNext()) {
            SNode declaration = itr.next();
            if (SNodeOperations.isInstanceOf(declaration, CONCEPTS.FunctionBool$EG)) {
              boolValue.setParam(names.next(), SPropertyOperations.getBoolean(((SNode) declaration), PROPS.value$ixaw));
            }
            if (SNodeOperations.isInstanceOf(declaration, CONCEPTS.FunctionInteger$ic)) {
              intValue.setParam(names.next(), SPropertyOperations.getInteger(((SNode) declaration), PROPS.value$DTPP));
            }
          }
          Object resultObject = context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.func$D2o4), context, coverage, trace, false);
          SoselValue.isCalling = true;
          SoselValue.stopAllValuesCall();
          return resultObject;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("callFunction()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("CallFunction");
      }

      @Override
      public String toString() {
        return "CallFunction";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.Function$Up, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/3829283723928539519", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          if (!(SoselValue.isCalling)) {
            return null;
          }
          SoselValue.isCalling = false;
          Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.body$NLRI)).iterator();
          while (itr.hasNext()) {
            SNode currentNode = itr.next();
            context.getRootInterpreter().evaluate(currentNode, context, coverage, trace, false);
          }
          return context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.funcValue$NM$L), context, coverage, trace, false);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("function()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("Function");
      }

      @Override
      public String toString() {
        return "Function";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.While$nL, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618827829771", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.addValue();
          while ((boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.cond$VcD6), context, coverage, trace, false)) {
            Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.body$Vi2t)).iterator();
            while (itr.hasNext()) {
              SNode currentNode = itr.next();
              context.getRootInterpreter().evaluate(currentNode, context, coverage, trace, false);
            }
          }
          SoselValue.removeValue();
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("While()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("While");
      }

      @Override
      public String toString() {
        return "While";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.IfElse$Cl, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618827867911", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.addValue();
          if ((boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.cond$JA5q), context, coverage, trace, false)) {
            Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.if$JAzs)).iterator();
            while (itr.hasNext()) {
              SNode currentNode = itr.next();
              context.getRootInterpreter().evaluate(currentNode, context, coverage, trace, false);
            }
          } else {
            Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.else$JBgv)).iterator();
            while (itr.hasNext()) {
              SNode currentNode = itr.next();
              context.getRootInterpreter().evaluate(currentNode, context, coverage, trace, false);
            }
          }
          SoselValue.removeValue();
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("IfElse()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("IfElse");
      }

      @Override
      public String toString() {
        return "IfElse";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.For$$_, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/8661094618827965640", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          SoselValue.addValue();
          context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.int$G$dq), context, coverage, trace, false);
          boolean myCond = (boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.bool$G_9u), context, coverage, trace, false);
          while (myCond) {
            Iterator<SNode> itr = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.body$GFHU)).iterator();
            while (itr.hasNext()) {
              SNode currentNode = itr.next();
              context.getRootInterpreter().evaluate(currentNode, context, coverage, trace, false);
            }
            context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.addUp$GELQ), context, coverage, trace, false);
            myCond = ((boolean) context.getRootInterpreter().evaluate(SLinkOperations.getTarget(node, LINKS.bool$G_9u), context, coverage, trace, false));
          }
          SoselValue.removeValue();
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("for()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("For");
      }

      @Override
      public String toString() {
        return "For";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.ExpressionStatementContent$5s, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662946860", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int index = 0;
          context.getRootInterpreter().evaluate(ListSequence.fromList(SNodeOperations.getChildren(node)).getElement(index), context, coverage, trace, false);
          return null;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("ExpressionStatementContent()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("ExpressionStatementContent");
      }

      @Override
      public String toString() {
        return "ExpressionStatementContent";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.ParenExpression$_F, "r:5b4dc85d-fc10-4d06-a0b6-3f07628a15e9(SoseL21.interpreter.plugin)/5956875130662962849", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          int index = 0;
          return context.getRootInterpreter().evaluate(ListSequence.fromList(SNodeOperations.getChildren(node)).getElement(index), context, coverage, trace, false);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("ParenExpression()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("ParenExpression");
      }

      @Override
      public String toString() {
        return "ParenExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
  }


  protected void populateTypeMappers(List<? extends ITypeMapper> typeMappers) {
  }



  protected void populateRelationships(List<? extends IRelationship> relationships) {
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink contents$WUQ2 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7d02L, 0xbfd127414bf7d05L, "contents");
    /*package*/ static final SReferenceLink reference$N7MS = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L, 0x403c8839c2e84ddeL, "reference");
    /*package*/ static final SContainmentLink intValue$WQj4 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6705413L, 0x52ab125ed6705418L, "intValue");
    /*package*/ static final SContainmentLink reference$WPP2 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6705413L, 0x52ab125ed6705416L, "reference");
    /*package*/ static final SContainmentLink value$$dNu = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c1ae46L, 0x783263aad9178630L, "value");
    /*package*/ static final SContainmentLink booleanValue$R_4p = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed673d8ffL, 0x52ab125ed673d904L, "booleanValue");
    /*package*/ static final SContainmentLink reference$RvF2 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed673d8ffL, 0x52ab125ed673d902L, "reference");
    /*package*/ static final SReferenceLink reference$ZtkH = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e4a3eL, 0x403c8839c2e7a258L, "reference");
    /*package*/ static final SReferenceLink ref$mdbw = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9430a26L, 0x783263aad9430a27L, "ref");
    /*package*/ static final SReferenceLink ref$qSh0 = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fdba2L, 0x783263aad93fdba3L, "ref");
    /*package*/ static final SContainmentLink first$oXey = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L, 0x52ab125ed67507dcL, "first");
    /*package*/ static final SContainmentLink second$p2BT = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6750519L, 0x52ab125ed67507deL, "second");
    /*package*/ static final SContainmentLink first$1VSY = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L, 0x27886c5347c16539L, "first");
    /*package*/ static final SContainmentLink second$1Wn0 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c15db5L, 0x27886c5347c1653bL, "second");
    /*package*/ static final SReferenceLink func$D2o4 = MetaAdapterFactory.getReferenceLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437780L, 0x783263aad9437785L, "func");
    /*package*/ static final SContainmentLink params$E8mA = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L, 0x783263aad93ead1eL, "params");
    /*package*/ static final SContainmentLink values$D1U2 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437780L, 0x783263aad9437783L, "values");
    /*package*/ static final SContainmentLink body$NLRI = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L, 0x783263aad93eadf7L, "body");
    /*package*/ static final SContainmentLink funcValue$NM$L = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L, 0x783263aad93eadfaL, "funcValue");
    /*package*/ static final SContainmentLink body$Vi2t = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e941dL, 0x783263aad93e9f31L, "body");
    /*package*/ static final SContainmentLink cond$VcD6 = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e941dL, 0x783263aad93e9f2fL, "cond");
    /*package*/ static final SContainmentLink if$JAzs = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e3187L, 0x783263aad93e318fL, "if");
    /*package*/ static final SContainmentLink else$JBgv = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e3187L, 0x783263aad93e3192L, "else");
    /*package*/ static final SContainmentLink cond$JA5q = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e3187L, 0x783263aad93e318dL, "cond");
    /*package*/ static final SContainmentLink int$G$dq = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L, 0x783263aad93b98b7L, "int");
    /*package*/ static final SContainmentLink bool$G_9u = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L, 0x783263aad93b98bbL, "bool");
    /*package*/ static final SContainmentLink body$GFHU = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L, 0x783263aad93b98c2L, "body");
    /*package*/ static final SContainmentLink addUp$GELQ = MetaAdapterFactory.getContainmentLink(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L, 0x783263aad93b98beL, "addUp");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SoSeWorksheet$t7 = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414bf7d02L, "SoseL21.structure.SoSeWorksheet");
    /*package*/ static final SConcept IntegerReference$_E = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c2cb91L, "SoseL21.structure.IntegerReference");
    /*package*/ static final SConcept Integer$xv = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L, "SoseL21.structure.Integer");
    /*package*/ static final SConcept AssignInteger$nK = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6705413L, "SoseL21.structure.AssignInteger");
    /*package*/ static final SConcept IntegerLetter$ij = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed67b2894L, "SoseL21.structure.IntegerLetter");
    /*package*/ static final SConcept Boolean$m_ = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c1ae46L, "SoseL21.structure.Boolean");
    /*package*/ static final SConcept BooleanLetter$U = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c180d2L, "SoseL21.structure.BooleanLetter");
    /*package*/ static final SConcept AssignBoolean$AL = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed673d8ffL, "SoseL21.structure.AssignBoolean");
    /*package*/ static final SConcept ReferIntegerParam$2I = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9430a26L, "SoseL21.structure.ReferIntegerParam");
    /*package*/ static final SConcept ReferBooleanParam$oT = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fdba2L, "SoseL21.structure.ReferBooleanParam");
    /*package*/ static final SConcept BooleanReference$SX = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x550d21c8a2e4a3eL, "SoseL21.structure.BooleanReference");
    /*package*/ static final SConcept Plus$K9 = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed675800eL, "SoseL21.structure.Plus");
    /*package*/ static final SConcept Minus$KC = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed675800fL, "SoseL21.structure.Minus");
    /*package*/ static final SConcept Multiply$VL = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6758011L, "SoseL21.structure.Multiply");
    /*package*/ static final SConcept Divide$Vi = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed6758010L, "SoseL21.structure.Divide");
    /*package*/ static final SConcept Less$Kn = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b52L, "SoseL21.structure.Less");
    /*package*/ static final SConcept Greater$Jp = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b50L, "SoseL21.structure.Greater");
    /*package*/ static final SConcept LessEqual$JS = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b51L, "SoseL21.structure.LessEqual");
    /*package*/ static final SConcept GreaterEqual$zL = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b4dL, "SoseL21.structure.GreaterEqual");
    /*package*/ static final SConcept NotEqual$KQ = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad90b2b53L, "SoseL21.structure.NotEqual");
    /*package*/ static final SConcept FunctionBool$EG = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd671L, "SoseL21.structure.FunctionBool");
    /*package*/ static final SConcept FunctionInteger$ic = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd7a5L, "SoseL21.structure.FunctionInteger");
    /*package*/ static final SConcept CallFunction$Ff = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad9437780L, "SoseL21.structure.CallFunction");
    /*package*/ static final SConcept Function$Up = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93eaaa4L, "SoseL21.structure.Function");
    /*package*/ static final SConcept While$nL = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e941dL, "SoseL21.structure.While");
    /*package*/ static final SConcept IfElse$Cl = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93e3187L, "SoseL21.structure.IfElse");
    /*package*/ static final SConcept For$$_ = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93b98b1L, "SoseL21.structure.For");
    /*package*/ static final SConcept ExpressionStatementContent$5s = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x403c8839c2edc924L, "SoseL21.structure.ExpressionStatementContent");
    /*package*/ static final SConcept ParenExpression$_F = MetaAdapterFactory.getConcept(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed67b28a7L, "SoseL21.structure.ParenExpression");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$UGmu = MetaAdapterFactory.getProperty(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0xbfd127414c0f1f7L, 0x602edc9f821baa0cL, "value");
    /*package*/ static final SProperty value$dkY0 = MetaAdapterFactory.getProperty(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x52ab125ed67b2894L, 0x52ab125ed67b2895L, "value");
    /*package*/ static final SProperty value$Fchw = MetaAdapterFactory.getProperty(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x27886c5347c180d2L, 0x27886c5347c180d3L, "value");
    /*package*/ static final SProperty value$ixaw = MetaAdapterFactory.getProperty(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd671L, 0x783263aad93fd672L, "value");
    /*package*/ static final SProperty value$DTPP = MetaAdapterFactory.getProperty(0x553bdaad1cb3493bL, 0xaccb16ef149d741aL, 0x783263aad93fd7a5L, 0x783263aad93fd7a6L, "value");
  }
}
