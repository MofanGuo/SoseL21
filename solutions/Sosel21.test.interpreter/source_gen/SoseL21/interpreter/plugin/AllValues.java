package SoseL21.interpreter.plugin;

/*Generated by MPS */

import java.util.LinkedList;
import java.util.HashMap;

public class AllValues {

  public static void addValue() {
    INT.addValue();
    BOOL.addValue();
  }

  public static void removeValue() {
    INT.removeValue();
    BOOL.removeValue();
  }

  public static Value<Integer> findInt() {
    if (INT == null) {
      Value<Integer> val1 = new Value<Integer>();
      INT = new Value<Integer>();
      return INT;
    } else {
      return INT;
    }
  }

  public static Value<Boolean> findBool() {
    if (BOOL == null) {
      BOOL = new Value<Boolean>();
      return BOOL;
    } else {
      return BOOL;
    }
  }

  protected static Value<Integer> INT;
  protected static Value<Boolean> BOOL;
  public static Boolean IS_CALLING = false;

  public static void allValuesCall() {
    INT.valuesCall();
    BOOL.valuesCall();
    AllValues.addValue();
  }

  public static void stopAllValuesCall() {
    INT.stopValuesCall();
    BOOL.stopValuesCall();
    AllValues.removeValue();
  }

  public static class Value<T> {
    private LinkedList<HashMap<String, T>> values;
    private LinkedList<HashMap<String, T>> params;


    public void addValue() {
      HashMap<String, T> toAdd = new HashMap<>();
      this.values.push(toAdd);
    }

    public void removeValue() {
      this.values.pop();
    }

    public void valuesCall() {
      params.push(new HashMap<String, T>());
    }

    public void stopValuesCall() {
      params.pop();
    }

    public void setParam(String key, T value) {
      HashMap<String, T> map = params.peek();
      map.put(key, value);
    }

    public T getParam(String key) {
      HashMap<String, T> map = params.peek();
      T paramT = map.get(key);
      return paramT;
    }

    public Value() {
      values = new LinkedList<>();
      params = new LinkedList<>();
      HashMap<String, T> initValue = new HashMap<String, T>();
      values.add(initValue);
    }



    public void setValue(String key, T value, boolean judge) {
      if (judge == true) {
        HashMap<String, T> map = values.peek();
        map.put(key, value);
        return;
      }
      for (HashMap<String, T> map : values) {
        if (map.containsKey(key)) {
          map.put(key, value);
        }
      }
      HashMap<String, T> map = values.peek();
      map.put(key, value);
    }

    public T getValue(String key) {
      for (HashMap<String, T> map : values) {
        if (map.containsKey(key)) {
          return map.get(key);
        }
      }
      return null;
    }

    public void empty() {
      values.clear();
      HashMap<String, T> map = new HashMap<>();
      values.add(map);
      params.clear();
    }

  }
}
